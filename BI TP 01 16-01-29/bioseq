#!/usr/bin/ruby

def main
    case ARGV[0] 
        when "print-fasta-sequences" 
            # args: file
            puts fileToGenom(ARGV[1])
        when "print-fasta-stats" 
            # args: file
            whenPrintFastaStats(ARGV[1])
        when "list-kmers"
            # args: size, file
            whenListKmers(ARGV[1].to_i, ARGV[2])
        when "common-kmers" 
            # args: size, file1, file2
            whenCommon(ARGV[1].to_i, ARGV[2], ARGV[3], :whenCommonKmers)
        when "ratio-common-kmers" 
            # args: size, file1, file2
            whenCommon(ARGV[1].to_i, ARGV[2], ARGV[3], :whenRatioCommonKmers)
        when "random-mutations" 
            # args: mutations, file
            randomMutation(ARGV[1].to_i, ARGV[2])
        when "list-spaced-kmers"
            # args: seed, file
            whenListSpacedKmers(ARGV[1], ARGV[2])
        when "common-spaced-kmers" 
            # args: seed, file1, file2
            whenCommonSpacedKmers(ARGV[1], ARGV[2], ARGV[3])
        when "ratio-common-spaced-kmers" 
            # args: seed, file1, file2
            whenRatioCommonSpacedKmers(ARGV[1], ARGV[2], ARGV[3])
        else
            puts "unknown function"
    end
end

# commands

def whenPrintFastaStats (file)
    fasta = parseFasta(file)
    id = fasta[0][1..-1]
    size = fasta.last.delete("\n").length
    puts "#{id} #{size}"
end

def whenListKmers(size, file)
    genom = fileToGenom(file)
    kmers = genomToKmers(genom, size)
    puts kmers
end

def whenCommon(size, file1, file2, f)
    genom1 = fileToGenom(file1)
    kmers1 = genomToKmers(genom1, size)
    genom2 = fileToGenom(file2)
    kmers2 = genomToKmers(genom2, size)
    send(f, kmers1, kmers2)
end

def whenCommonKmers (kmers1, kmers2)
    puts commonKmers(kmers1, kmers2)
end

def whenRatioCommonKmers (kmers1, kmers2)
    commons = commonKmers(kmers1, kmers2)
    puts commons.size.to_f / kmers1.size.to_f
end

def whenListSpacedKmers(seed, file)
    size = seed.length
    genom = fileToGenom(file)
    kmers = genomToKmers(genom, size)
    kmers = applySeed(kmers, seed)
    puts kmers
end

def whenCommonSpacedKmers (seed, file1, file2)
    size = seed.length
    genom1 = fileToGenom(file1)
    kmers1 = genomToKmers(genom1, size)
    genom2 = fileToGenom(file2)
    kmers2 = genomToKmers(genom2, size)
    commons = commonSpacedKmers(seed, kmers1, kmers2)
    puts commons
end

def whenRatioCommonSpacedKmers (seed, file1, file2)
    size = seed.length
    genom1 = fileToGenom(file1)
    kmers1 = genomToKmers(genom1, size)
    genom2 = fileToGenom(file2)
    kmers2 = genomToKmers(genom2, size)
    commons = commonSpacedKmers(seed, kmers1, kmers2)
    puts commons.size.to_f / kmers1.size.to_f
end

# utils

def parseFasta (file)
    File.read(file).split("\n", 2)
end

def fileToGenom(file)
    parseFasta(file).last.delete("\n")
end

def genomToKmers (genom, size)
    str = ""
    kmers = []
    genom.each_char do |c|
        str += c
        if str.length == size
            kmers.push(str[0..(size - 1)])
            str = str[1..(size - 1)]
        end
    end
    kmers
end 

# algos

def commonSpacedKmers (seed, kmers1, kmers2)
    kmers1 = applySeed(kmers1, seed)
    kmers2 = applySeed(kmers2, seed)
    commonKmers(kmers1, kmers2)
end

def commonKmers (kmers1, kmers2)
    commons = []
    kmers1.each do |kmer|
        if kmers2.include? kmer
            commons.push(kmer)
        end
    end
    commons
end

def changeOneLetter (genom)
    i = rand(genom.length)
    alphabet = ["A", "C", "G", "T"]
    alphabet = alphabet - [genom[i]]
    alphabet = alphabet.shuffle
    genom[i] = alphabet[0]
end

def randomMutation (mutations, file)
    id = file.split(".", 2)[0]
    puts ">#{id}-mutated-#{mutations}"
    genom = parseFasta(file).last.delete("\n")
    mutations.times do changeOneLetter(genom) end
    print genom
end

def applySeed(kmers, seed)
    kmers.map do |kmer|
        newKmer = ""
        seed.length.times do |i|
            if seed[i] == '#'
                newKmer += kmer[i]
            end
        end
        newKmer
    end
end

main




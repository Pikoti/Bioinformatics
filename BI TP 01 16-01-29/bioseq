#!/usr/bin/ruby

def main
    case ARGV[0] 
        when "print-fasta-sequences"
            whenPrintFastaSequences(ARGV)
        when "print-fasta-stats"
            whenPrintFastaStats(ARGV)
        when "list-kmers"
            whenListKmers(ARGV)
        when "common-kmers" 
            whenCommonKmers(ARGV)
        when "ratio-common-kmers"
            whenRatioCommonKmers(ARGV)
        when "random-mutations"
            randomMutation(ARGV[1].to_i, ARGV[2])
        when "f"
            randomMutation(ARGV[1].to_i, ARGV[2])
        else
            puts "unknown function"
    end
end

# commands

def whenPrintFastaSequences (argv)
    puts parseFasta(argv[1]).last.delete("\n")
end

def whenPrintFastaStats (argv)
    fasta = parseFasta(argv[1])
    id = fasta[0][1..-1]
    size = fasta.last.delete("\n").length
    puts "#{id} #{size}"
end

def whenListKmers (argv)
    size = argv[1].to_i
    genom = parseFasta(argv[2])
    genom = genom.last.delete("\n")
    puts genomToKmers(genom, size)
end

def whenCommonKmers (argv)
    size = argv[1].to_i
    genom1 = parseFasta(argv[2])
    genom1 = genom1.last.delete("\n")
    genom1 = genomToKmers(genom1, size)
    genom2 = parseFasta(argv[3])
    genom2 = genom2.last.delete("\n")
    genom2 = genomToKmers(genom2, size)
    puts commonKmers(genom1, genom2)
end

def whenRatioCommonKmers (argv)
    size = argv[1].to_i
    genom1 = parseFasta(argv[2])
    genom1 = genom1.last.delete("\n")
    genom1 = genomToKmers(genom1, size)
    genom2 = parseFasta(argv[3])
    genom2 = genom2.last.delete("\n")
    genom2 = genomToKmers(genom2, size)
    commons = commonKmers(genom1, genom2)
    puts commons.size.to_f / genom1.size.to_f
end

# utils

def parseFasta (file)
    File.read(file).split("\n", 2)
end

def genomToKmers (genom, size)
    str = ""
    kmers = []
    genom.each_char do |c|
        str += c
        if str.length == size
            kmers.push(str[0..(size - 1)])
            str = str[1..(size - 1)]
        end
    end
    kmers
end 

# algos

def commonKmers (genom1, genom2)
    commons = []
    genom1.each do |kmer|
        if genom2.include? kmer
            commons.push(kmer)
        end
    end
    commons
end

def changeLetter (genom, i)
    letter = genom[i]
    alphabet = ["A", "C", "G", "T"]
    alphabet = alphabet.reject { |l| l == letter }
    alphabet = alphabet.shuffle
    genom[i] = alphabet[0]
end

def randomMutation (mutations, file)
    id = file.split(".", 2)[0]
    puts ">#{id}-mutated (#{mutations})"
    genom = parseFasta(file).last.delete("\n")
    mutations.times do
        i = rand(0..(genom.length - 1))
        changeLetter(genom, i)
    end
    print genom
end


main




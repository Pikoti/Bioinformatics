#+TITLE: .analysis and .vidjil format
#+AUTHOR: The Vidjil team

The =.analysis= and the =.vidjil= files share a common [[http://en.wikipedia.org/wiki/JSON][.json]] format.
They are produced and used by several components of the Vidjil platform, 
but you can also use these formats to use the Vidjil browser within 
your own analysis pipeline.

The =.vidjil= file represents the actual data on clones (and that can
reach megabytes). It should be automatically produced.

The =.analysis= file describe customizations done by the user
(or by some automatic pre-processing) on the Vidjil browser. The browser
can load or save such files (and possibly from/to the patient database).
It is intended to be very small (a few kilobytes).
All settings in the =.analysis= file override the settings that could be
present in the =.vidjil= file.

* Examples

** =.vidjil= file -- one sample

This is an almost minimal =.vidjil= file, describing clones in one sample.
The =seg= element is optional: clones without =seg= elements will be shown on the grid with '?/?'.
All other elemnts are required. The =reads.germlines= list can have only one element the case of data on a unique locus.
There is here one clone with a segmentation =TRGV5*01 5/CC/0 TRGJ1*02=.
Note that other elements could be added by some program (such as =tag= or =clusters=).

#+BEGIN_SRC js :tangle analysis-example1.vidjil
    {
        "producer": "program xyz version xyz",
        "timestamp": "2014-10-01 12:00:11",
        "vidjil_json_version": "2014.10",

        "samples": {
             "number": 1, 
             "original_names": ["T8045-BC081-Diag.fastq"]
        },

        "reads" : {
            "total" :           [ 437164 ] ,
            "segmented" :       [ 335662 ] ,
            "germline" : {
                "TRG" :         [ 250000 ] ,
                "IGH" :         [ 85662  ]
            }
        },

        "clones": [
            {
                "id": "clone-001",
                "sequence": "CTCATACACCCAGGAGGTGGAGCTGGATATTGATACTACGAAATCTAATTGAAAATGATTCTGGGGTCTATTACTGTGCCACCTGGGCCTTATTATAAGAAACTCTTTGGCAGTGGAAC",
		"reads" : [ 243241 ],
                "germline": "TRG",
                "top": 1,
                "seg":
                {
		    "5": "TRGV5*01",  "5start": 0,   "5end": 86,
		    "3": "TRGJ1*02",  "3start": 89,  "3end": 118,
                    "cdr3": { "start": 77, "stop": 104, "seq": "gccacctgggccttattataagaaactc" }
		}

            }
        ]
    }
#+END_SRC

** =.vidjil= file -- several samples

This a =.vidjil= file obtained by merging with =fuse.py= two =.vidjil= files corresponding to two samples.
Clones that have a same =id= are gathered.
It is the responsability of the program generating the initial =.vidjil= files to choose these =id= to
do a correct gathering ('windows' is used by Vidjil, 'clone sequence' is used by EC-NGS/Brno pipeline, 
and 'IMGT clonotype (AA) or (nt)' could also be used by some programs).

#+BEGIN_SRC js :tangle analysis-example2.vidjil
    {
        "producer": "program xyz version xyz / fuse.py version xyz",
        "timestamp": "2014-10-01 14:00:11",
        "vidjil_json_version": "2014.10",

        "samples": {
             "number": 2, 
             "original_names": ["T8045-BC081-Diag.fastq", "T8045-BC082-fu1.fastq"]
        },

        "reads" : {
            "total" :           [ 437164, 457810 ] ,
            "segmented" :       [ 335662, 410124 ] ,
            "germline" : {
                "TRG" :         [ 250000, 300000 ] ,
                "IGH" :         [ 85662,   10124 ]
            }
        },

        "clones": [
            {
                "id": "clone-001",
                "sequence": "CTCATACACCCAGGAGGTGGAGCTGGATATTGATACTACGAAATCTAATTGAAAATGATTCTGGGGTCTATTACTGTGCCACCTGGGCCTTATTATAAGAAACTCTTTGGCAGTGGAAC",
		"reads" : [ 243241, 14717 ],
                "germline": "TRG",
                "top": 1,
                "seg":
                {
		    "5": "TRGV5*01",  "5start": 0,   "5end": 86,
		    "3": "TRGJ1*02",  "3start": 89,  "3end": 118
		}
            }
        ]
    }
#+END_SRC


** =.analysis= file

This file reflects what an user could have done with the browser (or with some other tool).
She has manually set sample names (=names=), tagged (=tag=, =tags=) and clustered (=clusters=) 
some clones, and added external data (=data=).

#+BEGIN_SRC js :tangle analysis-example2.analysis
    {
        "producer": "user Bob, via browser",
        "timestamp": "2014-10-01 12:00:11",
        "vidjil_json_version": "2014.10",

        "samples": {
             "number": 2, 
             "original_names": ["T8045-BC081-Diag.fastq", "T8045-BC082-fu1.fastq"],
             "names": ["diag", "fu1"],
             "order": [0, 1]
        },

        "clones": [
            {
                "id": "clone-845",
                "name": "Main LAL clone",
                "tag": "0"
            },
            {
                "id": "spikeE",
                "name": "spike",
                "sequence": "ATGACTCTGGAGTCTATTACTGTGCCACCTGGGATGTGAGTATTATAAGAAAC",
                "tag": "3",
                "expected": "0.1"
            }

        ],

        "clusters": [
            [ "clone-845", "clone-821", "clone-147" ],
            [ "clone-5", "clone-10", "clone-179" ]
        ],

        "data": {
             "qPCR": [0.83, 0.024],
             "spikeZ": [0.01, 0.02]
        },

        "tags": {
            "names": {
                "0" : "main clone",
                "3" : "spike",
                "5" : "custom tag"
            },
            "hide": [4, 5]
        }
    }
#+END_SRC


* The different elements
						     
** Generic information for traceability [required]

#+BEGIN_SRC js
   "producer": "",    // arbitrary string, user/software/options producing this file [required]
   "timestamp": "",   // last modification date [required]
   "vidjil_json_version": "2014.10", // version of the format  [required]
#+END_SRC



** 'reads' element [.vidjil only, required]

#+BEGIN_SRC js
{
    "total" :           // total number of reads per sample (with samples.number elements)
    "segmented" :       // number of segmented reads per sample (with samples.number elements)
    "germline" : {      // number of segmented reads per sample/germline (with samples.number elements)
        "TRG" :         
        "IGH" :         
    }
}
#+END_SRC js


 
** 'Samples' element [required]

#+BEGIN_SRC js
  {
    "number": 2,      // number of samples [required]

    "original_names": [],  // original sample names (with samples.number elements) [required]
                      // the names in the .vidjil file and in .analysis files must match

    "names": [],      // custom sample names (with samples.number elements) [optional]
                      // These names are editable and will be used on the graphs

    "order": [],      // custom sample order (lexicographic order by default) [optional]


    "producer": [],
    "timestamp": [],
    "log": [],
  }
#+END_SRC



** 'Clones' list

Each element in the 'clones' list describes properties of a clone.

In a .vidjil file, this is the main part, describing all clones.

In the .analysis file, this section is intended to describe some specific clones.



#+BEGIN_SRC js
  {
    "id": "",        // clone identifier, must be unique [required]
                     //          Vidjil/algo output -> the 'window'  
                     //          Brno .clntab       -> clone sequence
                     // the clone identifier in the .vidjil file and in .analysis file must match

    "germline": ""   // [required for .vidjil]
                     // (should match a germline defined in germline/germline.data)

    "name": "",      // clone custom name [optional]
                     // (the default name, in .vidjil, is computed from V/D/J information)

    "sequence": "",  // reference nt sequence [required for .vidjil]
                     // (for .analysis, not really used now in the browser,
                     //  for special clones/sequences that are known,
                     //  such as standard/spikes or know patient clones)
 
    "tag": "",       // tag id from 0 to 7 (see below) [optional]

    "expected": ""   // expected abundance of this clone (between 0 and 1) [optional]
                     // this will create a normalization option in the 
                     // settings browser menu

    "seg":           // segmentation information [optional]
                     // in the browser clones, that are not segmented will be shown on the grid with '?/?'
                     // positions are related to the 'sequence'
                     // names of V/D/J genes should match the ones in files referenced in germline/germline.data
      {
         "5": "IGHV5*01",
         "5start": 0, 
         "5end": 0,

         "4": "IGHD1*01",
         "4start": 0, 
         "4end": 0,

         "3": "IGHJ3*02",
         "3start": 0, 
         "3end": 0,

                     // any feature to be highligthen in the sequenc
                     // the optional "seq" element gives a sequence that corresponds to this feature
         "somefeature": { "start": 0, "stop": 0, "seq": "" }
      }


    "reads": [],      // number of reads in this clones [.vidjil only, required] 
                      // (with samples.number elements)
    "top": 0,         // required so that the browser displays the clone

    "stats": []       // (not documented now) [.vidjil only] (with sample.number elements)


 }
#+END_SRC

** 'Germlines' list [optional][work in progress, to be documented]

extend the =germline.data= default file with a custom germline

#+BEGIN_SRC js
        "germlines" : {
            "custom" : {
                "shortcut": "B",
                "5": ["TRBV.fa"],
                "4": ["TRBD.fa"],
                "3": ["TRBJ.fa"]
            }
        }
#+END_SRC

** 'Clusters' list [optional]

Each element in the 'clusters' list describe a list of clones that are 'merged'.
In the browser, it will be still possible to see them or to unmerge them.
The first clone of each line is used as a representative for the cluster.


** 'Data' list [optional][work in progress, to be documented]

Each element in the 'data' list is a list of values (of size samples.number)
showing additional data for each sample, as for example qPCR levels or spike information.

In the browser, it will be possible to display these data and to normalize
against them (not implemented now).

** 'Tags' list [optional]

The 'tags' list describe the custom tag names as well as tags that should be hidden by default.
The default tag names are defined in [[../browser/js/vidjil-style.js]].

#+BEGIN_SRC js
    "key" : "value"  // "key" is the tag id from 0 to 7 and "value" is the custom tag name attributed
#+END_SRC

#!/usr/bin/ruby

require './src/Fasta2.rb'
require './src/ADN.rb'

def main
    case ARGV[0] 
        when "best-matches"
            # n (sequences) seed reads germline
            whenBestMatches(ARGV[1].to_i, ARGV[2], ARGV[3], ARGV[4])
        else
            puts "unknown function"
    end
end

# commands

def whenBestMatches (n, seed, read, germline)
    ratios = []
    read = Fasta2.new(read)
    germline = Fasta2.new(germline)
    readKmers = read.sequences[0].adn.toSpacedKmers(seed)
    germline.sequences.each do |seq|
        kmers = seq.adn.toSpacedKmers(seed)
        commons = commonKmers(readKmers, kmers)
        ratio = commons.size.to_f / readKmers.size.to_f
        ratios.push([ratio, seq, commons.size])
    end
    ratios.sort! { |x,y| y[0] - x[0] }
    ratios[0..n-1].each do |couple|
        id = couple[1].id.ljust(15, ' ')
        print ">" + id + " " + couple[2].to_s + "\n"
    end
end

=begin
def whenRatioCommonSpacedKmers (seed, file1, file2)
    genom1 = Fasta.toGenom(file1)
    kmers1 = genom1.toSpacedKmers(seed)
    genom2 = Fasta.toGenom(file2)
    kmers2 = genom2.toSpacedKmers(seed)
    commons = commonKmers(kmers1, kmers2)
    puts commons.size.to_f / kmers1.size.to_f
=end

# algos

def commonKmers (kmers1, kmers2)
    commons = []
    kmers1.each do |kmer|
        if kmers2.include? kmer
            commons.push(kmer)
        end
    end
    commons
end

main



























#!/usr/bin/ruby

require './src/Fasta.rb'
require './src/Genom.rb'

def main
    case ARGV[0] 
        when "print-fasta-sequences" 
            # args: file
            puts Fasta.toGenom(ARGV[1])
        when "print-fasta-stats" 
            # args: file
            puts Fasta.toGenom(ARGV[1]).stats()
        when "list-kmers"
            # args: kmer, file
            puts Fasta.toGenom(ARGV[2]).toKmers(ARGV[1].to_i)
        when "common-kmers" 
            # args: kmer, file1, file2
            whenCommon(ARGV[1].to_i, ARGV[2], ARGV[3], :whenCommonKmers)
        when "ratio-common-kmers" 
            # args: kmer, file1, file2
            whenCommon(ARGV[1].to_i, ARGV[2], ARGV[3], :whenRatioCommonKmers)
        when "random-mutations" 
            # args: mutations, file
            whenRandomMutations(ARGV[1].to_i, ARGV[2])
        when "list-spaced-kmers"
            # args: seed, file
            puts Fasta.toGenom(ARGV[2]).toKmers(ARGV[1])
        when "common-spaced-kmers" 
            # args: seed, file1, file2
            whenCommonSpacedKmers(ARGV[1], ARGV[2], ARGV[3])
        when "ratio-common-spaced-kmers" 
            # args: seed, file1, file2
            whenRatioCommonSpacedKmers(ARGV[1], ARGV[2], ARGV[3])
        when "windows" 
            # args: length, shift, file
            whenWindows(ARGV[1].to_i, ARGV[2].to_i, ARGV[3])
        when "mapper-windows-kmers" 
            # args: window, shift, kmer, threshold, read, file
            whenMapperKmers(ARGV[1].to_i, ARGV[2].to_i, ARGV[3].to_i, ARGV[4].to_f, ARGV[5], ARGV[6])
        when "mapper-windows-spaced-kmers"
            # args: window, shift, seed, threshold, read, file
            whenMapperSpacedKmers(ARGV[1].to_i, ARGV[2].to_i, ARGV[3], ARGV[4].to_f, ARGV[5], ARGV[6])
        else
            puts "unknown function"
    end
end

#struct

Window = Struct.new(:lNum, :rNum, :content)

# commands

def whenCommon(size, file1, file2, f)
    genom1 = Fasta.toGenom(file1)
    kmers1 = genom1.toKmers(size)
    genom2 = Fasta.toGenom(file2)
    kmers2 = genom2.toKmers(size)
    send(f, kmers1, kmers2)
end

def whenCommonKmers (kmers1, kmers2)
    puts commonKmers(kmers1, kmers2)
end

def whenRatioCommonKmers (kmers1, kmers2)
    commons = commonKmers(kmers1, kmers2)
    puts commons.size.to_f / kmers1.size.to_f
end

def whenCommonSpacedKmers (seed, file1, file2)
    genom1 = Fasta.toGenom(file1)
    kmers1 = genom1.toSpacedKmers(seed)
    genom2 = Fasta.toGenom(file2)
    kmers2 = genom2.toSpacedKmers(seed)
    commons = commonKmers(kmers1, kmers2)
    puts commons
end

def whenRatioCommonSpacedKmers (seed, file1, file2)
    genom1 = Fasta.toGenom(file1)
    kmers1 = genom1.toSpacedKmers(seed)
    genom2 = Fasta.toGenom(file2)
    kmers2 = genom2.toSpacedKmers(seed)
    commons = commonKmers(kmers1, kmers2)
    puts commons.size.to_f / kmers1.size.to_f
end

def whenRandomMutations (n, file)
    genom = Fasta.toGenom(file).mutate(n)
    puts ">#{genom.id}-mutated-#{n}"
    puts genom
end

def whenWindows (length, shift, file)
    genom = Fasta.toGenom(file)
    windows = toWindows(length, shift, genom)
    windows.each do |window|
        puts "#{window.lNum}#{window.content}#{window.rNum}"
    end
end

def whenMapperKmers (windLength, shiftLength, kmerLength, seuilKmer, readFile, genomFile)
    read = Fasta.toGenom(readFile)
    genom = Fasta.toGenom(genomFile)
    mapperKmers(windLength, shiftLength, kmerLength, seuilKmer, read, genom)
end

def whenMapperSpacedKmers (windLength, shiftLength, seed, seuilKmer, readFile, genomFile)
    read = Fasta.toGenom(readFile)
    genom = Fasta.toGenom(genomFile)
    mapperSpacedKmers(windLength, shiftLength, seed, seuilKmer, read, genom)
end

# algos

def commonKmers (kmers1, kmers2)
    commons = []
    kmers1.each do |kmer|
        if kmers2.include? kmer
            commons.push(kmer)
        end
    end
    commons
end


def toWindows (length, shift, genom)
    i = 0
    windows = []
    pad = Math.log10(genom.size()).ceil
    loop do
        window = genom.window(i, length)
        if window.length < length
            break
        else
            lNum = (i + 1).to_s.rjust(pad, ' ')
            rNum = (i + length).to_s.rjust(pad, ' ')
            w = Window.new
            w.content = window
            w.rNum = rNum
            w.lNum = lNum
            windows.push(w)
            i += shift
        end
    end
    windows
end

# formule: 1 + (n -l)/s

def mapperKmers (windLength, shiftLength, kmerLength, seuilKmer, read, genom)
    windsGenom = toWindows(windLength, shiftLength, genom)
    if read.size() < windLength
       puts "Read size is < window size"
    else
        kmersRead = read.toKmers(kmerLength)
        windsGenom.each do |window|
            gen = Genom.new("", window.content) 
            kmers = gen.toKmers(kmerLength)
            commons = commonKmers(kmersRead, kmers)
            if (commons.size.to_f / kmersRead.size.to_f) >= seuilKmer
                puts "#{window.lNum} #{window.content} #{window.rNum}"
            end
        end
    end
end

def mapperSpacedKmers (windLength, shiftLength, seed, seuilKmer, read, genom)
    windsGenom = toWindows(windLength, shiftLength, genom)
    if read.size() < windLength
       puts "Read size is < window size"
    else
        kmersRead = read.toSpacedKmers(seed) 
        windsGenom.each do |window|   
            gen = Genom.new("", window.content) 
            kmers = gen.toSpacedKmers(seed)
            commons = commonKmers(kmersRead, kmers)
            if (commons.size.to_f / kmersRead.size.to_f) >= seuilKmer
                puts "#{window.lNum} #{window.content} #{window.rNum}"
            end
        end
    end
end




main


























